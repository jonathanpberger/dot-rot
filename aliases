# This probably wants to go in ~/.oh-my-zsh/custom/aliases.zsh

echo "\n\n•••••••••• Loading aliases ••• $(date "+%a %b %d %H:%M:%S") "

# Generally helpful
alias hg="history | grep"
alias g="gcalcli"
alias be="bundle exec"

alias pomo="pomodoro"
alias vi="nvim"
alias vim="nvim"

# Navigation
alias vscode-global="cd ~/Library/Application\ Support/Code/User/"
alias dotrot="cd ~/workspace/dot-rot"

# Some alias / shell housekeeping
alias zr="source ~/.zshrc"
alias ze="code ~/.zshrc"
alias za="code ~/.oh-my-zsh/custom/aliases.zsh"

# An alias for dvorak typists
alias aoeu='asdf'

# Some todo apps
alias t='reminders'
alias ta='reminders add'
alias td='reminders complete Reminders'
alias rsl='reminders show-lists'
alias tl='reminders show Reminders'

# `Now.md` convenience methods
export FOAM_HOME=~/workspace/foam
alias todos="ack '^.[^|\[]\[[ x]\]\s+.*' ~/workspace/foam/now.md -C2"
alias prev-todos="ack '^.[^|\[]\[[^x]\]\s\w' prev.md -C2"
alias h2s="ack '^\#{2}\s' ~/workspace/foam/now.md -C1"
alias projects-w-context="ack  '(\+\+\w.*)'  ~/workspace/foam/now.md --output '$1'"
alias projects="ack -o '\+\+\w+' ~/workspace/foam/now.md | sort | uniq"
alias prev-projects="ack -o '\+\+\w+' ~/workspace/foam/prev.md | sort | uniq"
alias todo-projects="ack -o '\+\+\w+' ~/workspace/foam/todo.md | sort | uniq"

alias foam="cd ~/workspace/foam"
alias frogs="ack '🐸' ~/workspace/foam/todo.md | sort"
alias nitty="ack '🧹' ~/workspace/foam/todo.md | sort"
alias cherry="ack '🍒' ~/workspace/foam/todo.md | sort"
alias pom="ack '🍅' ~/workspace/foam/todo.md | sort"



# path/filename: ~/scripts/todo_project_count.sh
# This script generates a markdown table with a list of unique projects and their counts from the todo.md file.
# Function to extract projects and count occurrences
generate_project_table() {
  local todo_file=$1
  echo "| Project | Count |"
  echo "|---------|-------|"
  grep -o "++[a-zA-Z0-9_]*" "$todo_file" | sort | uniq -c | while read -r count project; do
    # Clean project name and format as markdown table row
    project=${project//++/}
    echo "| $project | $count |"
  done
}

# Call the function with the path to the todo.md file
# generate_project_table "/path/to/todo.md"

########################################
########################################
########################################
########################################

function monthly_review() {
  local for_real=false

  # Check if --for_real flag is passed
  if [[ "$1" == "--for_real" ]]; then
    for_real=true
  fi

  # Define the filenames
  old_file="jpb_notes-$(date -v-1m +%Y-%m).md"
  new_file="jpb_notes-$(date +%Y-%m).md"

  # Set the header based on whether this is a dry run
  if [[ "$for_real" == true ]]; then
    echo "\n######### EXECUTING: Monthly Review #########"
  else
    echo "\n######### DRY RUN: Monthly Review #########"
  fi

  echo "######### prev: $old_file"
  echo "######### now: $new_file\n"

  if [[ "$for_real" == true ]]; then
    # Actually perform the operations
    cp "$old_file" "$new_file"
    chmod 444 "$old_file"
    rm -f now.md prev.md
    ln -s "$new_file" now.md
    ln -s "$old_file" prev.md

    # Update frontmatter in the new file
    sed -i '' "1,/---/c\\
---\\
name: JPB Monthly Notes for $(date +'%m')/$(date +'%Y')\\
filepath: \"$new_file\"\\
---" "$new_file"

    # Check the links
    echo "\nChecking links:"
    ls -l now.md prev.md
  else
    # Dry run output
    echo "[DRY RUN] Would copy $old_file to $new_file"
    echo "[DRY RUN] Would make $old_file read-only (chmod 444)"
    echo "[DRY RUN] Would remove now.md and create symlink to $new_file"
    echo "[DRY RUN] Would remove prev.md and create symlink to $old_file"
    echo "[DRY RUN] Would update frontmatter in $new_file:"
    cat <<EOF
---
name: JPB Monthly Notes for $(date +'%m')/$(date +'%Y')
filepath: "$new_file"
---
EOF
    echo "\n[DRY RUN] Would check links:"
    echo "now.md -> $new_file"
    echo "prev.md -> $old_file"

    echo "\n######### End of DRY RUN #########"
    echo "\nTo execute these changes, run: monthly_review --for_real"
  fi
}


########################################
########################################
########################################
########################################




function ship() {
    local now_file="$HOME/now.md"


  echo "| Date       | Shipped Items |"
  echo "|------------|---------------|"

  awk '
    function trim(s) {
      sub(/^[[:space:]]+/, "", s)
      sub(/[[:space:]]+$/, "", s)
      return s
    }
    /^# [0-9]{2}\/[0-9]{2}/ {
      if (date) {
        printf "| %-10s | %s |\n", date, (shipped ? shipped : "No items shipped")
      }
      day_of_week = substr($4, 1, 3)  # Take first 3 chars of day
      date = $2 " - " day_of_week
      shipped = ""
      in_ship_section = 0
    }
    /^## 🚢 What did you ship today\?/ {
      in_ship_section = 1
      next
    }
    /^#|^---/ {
      in_ship_section = 0
    }
    in_ship_section && NF {
      shipped = shipped " " $0
    }
    END {
      if (date) {
        printf "| %-10s | %s |\n", date, (shipped ? trim(shipped) : "No items shipped")
      }
    }
  ' "$now_file"
}


########################################
########################################
########################################
########################################




##  ███████╗██╗███╗   ██╗██╗███████╗██╗  ██╗███████╗██████╗     ██╗      ██████╗  █████╗ ██████╗ ██╗███╗   ██╗ ██████╗      █████╗ ██╗     ██╗ █████╗ ███████╗███████╗████████╗
##  ██╔════╝██║████╗  ██║██║██╔════╝██║  ██║██╔════╝██╔══██╗    ██║     ██╔═══██╗██╔══██╗██╔══██╗██║███╗  ██║██╔════╝     ██╔══██╗██║     ██║██╔══██╗██╔════╝██╔════╝██╔════╝
##  █████╗  ██║██╔██╗ ██║██║███████╗███████║█████╗  ██║  ██║    ██║     ██║   ██║███████║██║  ██║██║██╔██╗ ██║██║  ███╗    ███████║██║     ██║███████║███████╗█████╗  ███████╗
##  ██╔══╝  ██║██║╚██╗██║██║╚════██║██╔══██║██╔══╝  ██║  ██║    ██║     ██║   ██║██╔══██║██║  ██║██║██║╚██╗██║██║   ██║    ██╔══██║██║     ██║██╔══██║╚════██║██╔══╝  ╚════██║
##  ██║     ██║██║ ╚████║██║███████║██║  ██║███████╗██████╔╝    ███████╗╚██████╔╝██║  ██║██████╔╝██║██║ ╚████║╚██████╔╝    ██║  ██║███████╗██║██║  ██║███████║███████╗███████╗
##  ╚═╝     ╚═╝╚═╝  ╚═══╝╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚═════╝     ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝ ╚═════╝     ╚═╝  ╚═╝╚══════╝╚═╝╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝


echo "•••••••••• Finished Loading aliases!\n\n"



