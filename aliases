# This probably wants to go in ~/.oh-my-zsh/custom/aliases.zsh

echo "•••••••••• Loading aliases ••• $(date "+%a %b %d %H:%M:%S") "

# Generally helpful
alias hg="history | grep"
alias g="gcalcli"
alias be="bundle exec"

alias pomo="pomodoro"
alias vi="nvim"
alias vim="nvim"

# Navigation
alias vscode-global="cd ~/Library/Application\ Support/Code/User/"
alias dotrot="cd ~/workspace/dot-rot"

# Some alias / shell housekeeping
alias zr="source ~/.zshrc"
alias ze="code ~/.zshrc"
alias za="code ~/.oh-my-zsh/custom/aliases.zsh"

# An alias for dvorak typists
alias aoeu='asdf'

# Some todo apps
alias t='reminders'
alias ta='reminders add'
alias td='reminders complete Reminders'
alias rsl='reminders show-lists'
alias tl='reminders show Reminders'

# `Now.md` convenience methods
alias todos="ack '^.[^|\[]\[[^x]\]\s\w' ~/Dropbox/Notes-and-docs/JPB-monthly-notes/foam/now.md -C2"
alias prev-todos="ack '^.[^|\[]\[[^x]\]\s\w' prev.md -C2"
alias h2s="ack '^\#{2}\s' ~/Dropbox/Notes-and-docs/JPB-monthly-notes/foam/now.md -C1"
alias projects="ack  '(\+\+\w.*)'  ~/Dropbox/Notes-and-docs/JPB-monthly-notes/foam/now.md --output '$1'"
alias prev-projects="ack  '(\+\+\w.*)'  ~/Dropbox/Notes-and-docs/JPB-monthly-notes/foam/prev.md --output '$1'"
alias foam="cd ~/Dropbox/Notes-and-docs/JPB-monthly-notes/foam"

# Github CLI

alias ttl="pmtl \n\n && gordtl \n\n && ghtl"

#####################   ██████╗ ███╗   ███╗████████╗██╗        Product Management Task List
#####################   ██╔══██╗████╗ ████║╚══██╔══╝██║
#####################   ██████╔╝██╔████╔██║   ██║   ██║
#####################   ██╔═══╝ ██║╚██╔╝██║   ██║   ██║
#####################   ██║     ██║ ╚═╝ ██║   ██║   ███████╗
#####################   ╚═╝     ╚═╝     ╚═╝   ╚═╝   ╚══════╝

function pmtl() {
  local headers="|Order | Status | Title | Project | Link|\n|---|---|---|---|---|"

  local result=$(gh p item-list 36 --limit 300 --format=json | jq -r '(.items | to_entries | map(select((.value.status == "In progress" or .value.status == "Backlog" or .value.status == "Waiting") and (.value.assignees[]? | contains("jonathanpberger"))))) | .[] | "| \(.key+1) | \(.value.status) | \(.value.title) | \(.value["project 🪚"]) | \((.value.content.repository | split("/")[-1]) + "/" + (.value.content.number|tostring)) |"')

  echo -e "### SL PM Tasks"
  echo -e "$headers"
  echo "$result"
  echo -e "$headers\n$result" | pbcopy
}
# ######### this works
#
# function gordtl() {
#   local headers="|Title|Status|url|Assignees|\n|--|--|--|--|"
#   local result=$(gh p item-list 47 --limit 22 --format=json | jq -r '.items[] | "| \(.title) | \(.status) |\(.content.url) | \(.assignees // [] | if type == "array" then map(if type == "object" then .login else . end) else [] end | join(", ")) |"')

#   echo -e "### Gordian Tasks"
#   echo -e "$headers"
#   echo "$result"
#   echo -e "$headers\n$result" | pbcopy
# }
# #########


########################     ██████╗  ██████╗ ██████╗ ██████╗ ████████╗██╗        Gordian Task List
########################    ██╔════╝ ██╔═══██╗██╔══██╗██╔══██╗╚══██╔══╝██║
########################    ██║  ███╗██║   ██║██████╔╝██║  ██║   ██║   ██║
########################    ██║   ██║██║   ██║██╔══██╗██║  ██║   ██║   ██║
########################    ╚██████╔╝╚██████╔╝██║  ██║██████╔╝   ██║   ███████╗
########################     ╚═════╝  ╚═════╝ ╚═╝  ╚═╝╚═════╝    ╚═╝   ╚══════╝



function gordtl() {
  echo "Version 0.42"
  local headers="|Order|Status|Title|URL|Assignees|\n|--|--|--|--|--|"
  local result=$(gh p item-list 47 --format=json | jq -r '.items | to_entries[] | "| \(.key + 1) | \(.value.status) | \(.value.title) | \(.value.content.url) | \(.value.assignees // [] | if type == "array" then map(if type == "object" then .login else . end) else [] end | join(", ")) |"')

  local count=$(echo "$result" | wc -l | tr -d ' ')

  echo -e "### Gordian Tasks"
  echo -e "$headers\n$result"
  echo -e "$headers\n$result" | pbcopy
  echo -e "\n\n********* Gordian Tasks have been copied to the clipboard. There are $count tasks. :-) ###\n"
}


#################           ██████╗ ██╗  ██╗████████╗██╗          Github Task List
#################          ██╔════╝ ██║  ██║╚══██╔══╝██║          Map this to whichever project is top priority.
#################          ██║  ███╗███████║   ██║   ██║
#################          ██║   ██║██╔══██║   ██║   ██║
#################          ╚██████╔╝██║  ██║   ██║   ███████╗
#################           ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚══════╝



function ghtl() {
  local headers="|Order | Status | Title | url|"
  local separators="|$(echo "$headers" | sed 's/[^|]//g' | sed 's/|/---|/g' | sed 's/|$//')"

  local result=$(gh p item-list 46 --limit 300 --format=json | jq -r '(.items | to_entries | map(select((.value.status == "In progress" or .value.status == "Backlog" or .value.status == "Waiting") and (.value.assignees[]? | contains("jonathanpberger"))))) | .[] | "| \(.key+1) | \(.value.status) | \(.value.title) | \((.value.content.repository | split("/")[-1]) + "/" + (.value.content.number|tostring)) |"')

  echo -e "### README.lint Tasks"
  echo -e "$headers"
  echo -e "$separators"
  echo "$result"
  echo -e "$headers\n$result" | pbcopy
}


####################       ██████╗ ██╗  ██╗██╗
####################      ██╔════╝ ██║  ██║██║
####################      ██║  ███╗███████║██║
####################      ██║   ██║██╔══██║██║
####################      ╚██████╔╝██║  ██║██║
####################       ╚═════╝ ╚═╝  ╚═╝╚═╝



function ghi() {
  local user=$(gh api /user | jq -r '.login')
  local header="| Repository | Number | State | Title |url|"
  local separator="|------------|--------|-------|-----|--|"
  local results=$(gh search issues --assignee=@me --state=open --limit 333 --include-prs --json="repository,number,state,title,url" | jq -r '.[] | "| \(.repository.name) | \(.number) | \(.state) | \(.title) | \(.url) |"')
  local count=$(echo "$results" | wc -l | tr -d ' ')
  local title="### $count Open GitHub Issues for @$user"

  echo "$title"
  echo "$header"
  echo "$separator"
  echo "$results"

  echo -e "$title\n$header\n$separator\n$results" | pbcopy
  echo -e "\n$title have been copied to the clipboard. There are $count issues. :-) ###"
}


############    ██████╗ ██████╗  █████╗ ██╗   ██╗ ANSI Shadow
############   ██╔════╝ ██╔══██╗██╔══██╗╚██╗ ██╔╝
############   ██║  ███╗██║  ██║███████║ ╚████╔╝
############   ██║   ██║██║  ██║██╔══██║  ╚██╔╝
############   ╚██████╔╝██████╔╝██║  ██║   ██║
############    ╚═════╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝
############    TODO: add duration
############    TODO: extend duration
############    ╚═════╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝

function gday() {
  echo "    🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞"
  echo "    🌞🌞🌞   gday Version 1.4.0    🌞🌞🌞"
  echo "    🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞 \n\n"

  # local day_of_week=$(date '+%A')
  # local h1="# $(date '+%m/%d') - ${day_of_week}"

  local day_of_week=$(date '+%A')
  local h1="# $(date '+%m/%d') - ${day_of_week}"

  # Add emoji and week number on Mondays
  if [[ $day_of_week == "Monday" ]]; then
    h1+=" - 📆 Week $(date '+%V')"
  fi

  local title="## 🪢 Todo Today"
  local table_header="| Time    | Item |"
  local table_separator="|---------|------|"
  local output=$(gcalcli --cal "JPB-DW" --cal "Pomo" --cal "JPB SL" --cal "JPB Private" agenda "1am today" "11pm today" --nocolor --no-military --details length)

  # Emoji map for times
  declare -A emoji_map=(
    [800]="🕗" [830]="🕣" [900]="🕘" [930]="🕤"
    [1000]="🕙" [1030]="🕥" [1100]="🕚" [1130]="🕦"
    [1200]="🕛" [1230]="🕧" [100]="🕐" [130]="🕜"
    [200]="🕑" [230]="🕝" [300]="🕒" [330]="🕞"
    [400]="🕓" [430]="🕟" [500]="🕔" [530]="🕠"
    [600]="🕕" [630]="🕡" [700]="🕖" [730]="🕢"
  )

  # Remove ANSI color codes and process the output
  local no_color_output=$(echo "$output" | sed 's/\x1b\[[0-9;]*m//g')
  local body=""
  local lines=()
  local time_count=()

  echo "$no_color_output" | while IFS= read -r line; do
  line=$(echo "$line" | sed 's/^[ \t]*//')

  # Check if line contains time and event
  if [[ $line =~ ^[0-9]{1,2}:[0-9]{2}[apm]{2} ]]; then
    local time=$(echo "$line" | awk '{print $1}')
    local item=$(echo "$line" | awk '{$1=""; print substr($0,2)}')
    local time_number=$(echo "$time" | tr -d '[:alpha:]' | tr -d ':')

    # Check if the item starts with an emoji (non-alphanumeric character)
    if ! [[ $item =~ ^[^[:alnum:]] ]]; then
      local emoji=${emoji_map[$time_number]}
      item="${emoji} $item"
    fi

    # Read next line for duration and convert it to minutes
    IFS= read -r next_line
    local duration_raw=$(echo "$next_line" | awk '/Length:/ {print $2}')
    local hours=$(echo "$duration_raw" | cut -d ':' -f 1)
    local minutes=$(echo "$duration_raw" | cut -d ':' -f 2)
    local total_minutes=$((hours * 60 + minutes))
    local duration="${total_minutes}m"

    lines+=("$time_number|$time|$duration|$item")
    ((time_count[$time_number]++))
  fi
done

# Update table headers to include Duration
local table_header="| Time    | Duration | Item |"
local table_separator="|---------|----------|------|"

# Process lines and remove pomodoros where necessary
for line in "${lines[@]}"; do
  IFS='|' read -r time_number time duration item <<< "$line"
  if [[ ${time_count[$time_number]} -gt 1 && $item == *"🍅"* ]]; then
    continue
  fi
  body+="| ${time} | ${duration} | ${item} |"$'\n'
done

echo -e "${h1}\n\n${title}\n${table_header}\n${table_separator}\n${body}"

}

######################   █████╗ ██╗     ██╗  ████████╗██╗        # alltl function v0.1
######################  ██╔══██╗██║     ██║  ╚══██╔══╝██║        # Retrieves a combined list of all GitHub issues assigned to me and their project status.
######################  ███████║██║     ██║     ██║   ██║        # Depends on GitHub CLI (`gh`) and `jq` for processing JSON.
######################  ██╔══██║██║     ██║     ██║   ██║
######################  ██║  ██║███████╗███████╗██║   ███████╗
######################  ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝   ╚══════╝

function alltl() {
  # Get list of issues assigned to me
  local issues=$(gh issue list --assignee @me --json number,title,repository --jq '.[] | {number, title, repo: .repository.nameWithOwner}')

  # Get list of projects I'm a member of
  local projects=$(gh api graphql -f query='
    {
      viewer {
        projectsV2(first: 10) {
          nodes {
            name
            items(first: 100) {
              nodes {
                content {
                  ... on Issue {
                    number
                  }
                }
                fieldValues(first: 10) {
                  nodes {
                    projectField {
                      name
                    }
                    value
                  }
                }
              }
            }
          }
        }
      }
    }' --jq '.data.viewer.projectsV2.nodes[] | {project: .name, items: [.items.nodes[] | {number: .content.number, status: (.fieldValues.nodes[] | select(.projectField.name == "Status") | .value)]}}')

  # Synthesize table with combined data
  local header="| Title | Repo Name / Issue Number | Assigned Project | Status |"
  local separator="|-------|-------------------------|------------------|--------|"
  echo "$header"
  echo "$separator"

  for issue in $(echo "$issues" | jq -c '.'); do
    local issue_number=$(echo "$issue" | jq -r '.number')
    local issue_title=$(echo "$issue" | jq -r '.title')
    local issue_repo=$(echo "$issue" | jq -r '.repo')
    local project_name="none"
    local status="none"

    # Check projects for this issue
    for project in $(echo "$projects" | jq -c '.'); do
      local p_name=$(echo "$project" | jq -r '.project')
      local p_issue=$(echo "$project" | jq --arg number "$issue_number" '.items[] | select(.number == ($number | tonumber))')
      if [ "$p_issue" != "" ]; then
        if [ "$project_name" == "none" ]; then
          project_name=$p_name
          status=$(echo "$p_issue" | jq -r '.status')
        else
          project_name="many"
          status="many"
          break
        fi
      fi
    done

    echo "| $issue_title | $issue_repo / $issue_number | $project_name | $status |"
  done | column -t -s '|'

  echo "Table has been synthesized."
}

function collect_field_names() {
  local version="v0.4"

  # Emit the version information
  echo "••••••••• collect_field_names [$version] •••••••••"

  # Retrieve and map the project names to their numbers
  local project_info=$(gh project list --owner strangelove-ventures --format json ) | jq -r '[.[] | {number, name}]'

  # Define the list of project numbers
  local project_numbers=(46 49 39 36 34 30 24 18)

  # Iterate over the project numbers to retrieve and print field names
  for project_number in $project_numbers; do
    # Extract the project name using the project number
    local project_name=$(echo "$project_info" | jq -r --argjson number $project_number '.[] | select(.number == $number) | .name')

    # Print the project name
    echo "Project $project_number ($project_name) fields:"

    # Retrieve and print the field names for the project
    gh project field-list $project_number --owner strangelove-ventures --format json |
      jq -r '[.fields[].name] | join(", ")'
    echo # Print a newline for better readability
  done
}

##################################################   ██████╗ ██████╗ ██╗ Map all issues to projects.
##################################################   ██╔══██╗██╔══██╗██║
##################################################   ██████╔╝██████╔╝██║
##################################################   ██╔═══╝ ██╔═══╝ ██║
##################################################   ██║     ██║     ██║
##################################################   ╚═╝     ╚═╝     ╚═╝

function ppi() {
  echo "Version 0.6.1"

  echo "Fetching current user..."
  local user=$(gh api /user | jq -r '.login')

  echo "Fetching Gordian tasks..."
  local gordianTasks=$(gh p item-list 47 --format=json | jq -r '
    .items | map({
      status: .status,
      title: .title,
      url: .content.url,
      assignees: (.assignees // [] | join(", "))
    })'
  )

  echo "Fetching PM tasks from another project..."
  local pmTasks=$(gh p item-list 36 --limit 300 --format=json | jq -r '
    .items | map(select(.content.url != null)) | map({
      status: .status,
      title: .title,
      project: .["project 🪚"],
      url: .content.url,
      projectStatuses: [{project: .project, status: .status}]
    })'
  )

  echo "Fetching GitHub issues..."
  local gitHubIssues=$(gh search issues --assignee=@me --state=open --limit=333 --include-prs --json="repository,number,state,title,url" | jq -r '.[] | {repository: .repository.name, number: .number, state: .state, title: .title, url: .url}')

  echo "Combining tasks and issues..."
  local combinedResults=$(jq -n '
    input as $gordianTasks | input as $pmTasks | input as $gitHubIssues |
    ($gordianTasks + $pmTasks + $gitHubIssues) | group_by(.url) | map({
      title: .[0].title,
      status: .[0].status,
      state: (.[0].state // ""),
      assignees: .[0].assignees,
      repository: (.[0].repository // ""),
      number: (.[0].number // ""),
      url: .[0].url,
      projectStatuses: (reduce .[] as $item ([]; . + ($item.projectStatuses // [])))
    })' <(echo "$gordianTasks") <(echo "$pmTasks") <(echo "$gitHubIssues"))

  local combinedTable=$(echo "$combinedResults" | jq -r '.[] | select(.url != null) | "| \(.title) | \(.status) // (if .projectStatuses then (.projectStatuses | map(.status) | join(", ")) else "N/A" end) | \(.assignees) | \(.repository) | \(.number) | \(.state) | \(.url) |"')

  local count=$(echo "$combinedResults" | jq -r 'length')
  local title="### Combined Gordian and SL PM Tasks with GitHub Issues for @$user"

  local tableHeader="|URL|Title|Status|Assignees|Repository|Issue Number|Issue State|"
  local separator="|---|-----|------|---------|----------|------------|-----------|"

  echo -e "$title\n$tableHeader\n$separator\n$combinedTable"

  echo -e "$title\n$tableHeader\n$separator\n$combinedTable" | pbcopy
  echo -e "\n$title have been copied to the clipboard. There are $count combined tasks and issues. :-) ###"
}

##  ███████╗██╗███╗   ██╗██╗███████╗██╗  ██╗███████╗██████╗     ██╗      ██████╗  █████╗ ██████╗ ██╗███╗   ██╗ ██████╗      █████╗ ██╗     ██╗ █████╗ ███████╗███████╗███████╗
##  ██╔════╝██║████╗  ██║██║██╔════╝██║  ██║██╔════╝██╔══██╗    ██║     ██╔═══██╗██╔══██╗██╔══██╗██║████╗  ██║██╔════╝     ██╔══██╗██║     ██║██╔══██╗██╔════╝██╔════╝██╔════╝
##  █████╗  ██║██╔██╗ ██║██║███████╗███████║█████╗  ██║  ██║    ██║     ██║   ██║███████║██║  ██║██║██╔██╗ ██║██║  ███╗    ███████║██║     ██║███████║███████╗█████╗  ███████╗
##  ██╔══╝  ██║██║╚██╗██║██║╚════██║██╔══██║██╔══╝  ██║  ██║    ██║     ██║   ██║██╔══██║██║  ██║██║██║╚██╗██║██║   ██║    ██╔══██║██║     ██║██╔══██║╚════██║██╔══╝  ╚════██║
##  ██║     ██║██║ ╚████║██║███████║██║  ██║███████╗██████╔╝    ███████╗╚██████╔╝██║  ██║██████╔╝██║██║ ╚████║╚██████╔╝    ██║  ██║███████╗██║██║  ██║███████║███████╗███████║
##  ╚═╝     ╚═╝╚═╝  ╚═══╝╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚═════╝     ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝ ╚═════╝     ╚═╝  ╚═╝╚══════╝╚═╝╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝


echo "•••••••••••••••• Finished Loading aliases!\n\n"

