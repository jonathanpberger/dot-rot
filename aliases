# This probably wants to go in ~/.oh-my-zsh/custom/aliases.zsh

echo "•••••••••• Loading aliases ••• $(date "+%a %b %d %H:%M:%S") "

# Add calendar configuration
GCAL_CALENDARS=(
  "JPB-DW"
  "Pomo"
  "Bergers"
  "JPB Private"
)

# Generally helpful
alias hg="history | grep"
alias g="gcalcli"
alias be="bundle exec"

alias pomo="pomodoro"
alias vi="nvim"
alias vim="nvim"

# Navigation
alias vscode-global="cd ~/Library/Application\ Support/Code/User/"
alias dotrot="cd ~/workspace/dot-rot"

# Some alias / shell housekeeping
alias zr="source ~/.zshrc"
alias ze="code ~/.zshrc"
alias za="code ~/.oh-my-zsh/custom/aliases.zsh"

# An alias for dvorak typists
alias aoeu='asdf'

# Some todo apps
alias t='reminders'
alias ta='reminders add'
alias td='reminders complete Reminders'
alias rsl='reminders show-lists'
alias tl='reminders show Reminders'

# `Now.md` convenience methods
export FOAM_HOME=~/workspace/foam
alias todos="ack '^.[^|\[]\[[^x]\]\s\w' ~/workspace/foam/now.md -C2"
alias prev-todos="ack '^.[^|\[]\[[^x]\]\s\w' prev.md -C2"
alias h2s="ack '^\#{2}\s' ~/workspace/foam/now.md -C1"
alias projects-w-context="ack  '(\+\+\w.*)'  ~/workspace/foam/now.md --output '$1'"
alias projects="ack -o '\+\+\w+' ~/workspace/foam/now.md | sort | uniq"
alias prev-projects="ack -o '\+\+\w+' ~/workspace/foam/prev.md | sort | uniq"
alias todo-projects="ack -o '\+\+\w+' ~/workspace/foam/todo.md | sort | uniq"

alias foam="cd ~/workspace/foam"
alias frogs="ack '🐸' ~/workspace/foam/todo.md | sort"
alias nitty="ack '🧹' ~/workspace/foam/todo.md | sort"
alias cherry="ack '🍒' ~/workspace/foam/todo.md | sort"
alias pom="ack '🍅' ~/workspace/foam/todo.md | sort"


# Github CLI

alias ttl="pmtl \n\n && gordtl \n\n && ghtl"

#####################   ██████╗ ███╗   ███╗████████╗██╗        Product Management Task List
#####################   ██╔══██╗████╗ ████║╚══██╔══╝██║
#####################   ██████╔╝██╔████╔██║   ██║   ██║
#####################   ██╔═══╝ ██║╚██╔╝██║   ██║   ██║
#####################   ██║     ██║ ╚═╝ ██║   ██║   ███████╗
#####################   ╚═╝     ╚═╝     ╚═╝   ╚═╝   ╚══════╝

function pmtl() {
  local headers="|Order | Status | Title | Project | Link|\n|---|---|---|---|---|"

  local result=$(gh p item-list 36 --limit 300 --format=json | jq -r '(.items | to_entries | map(select((.value.status == "In progress" or .value.status == "Backlog" or .value.status == "Waiting")))) | .[] | "| \(.key+1) | \(.value.status) | \(.value.title) | \(.value["project 🪚"]) | \((.value.content.repository | split("/")[-1]) + "/" + (.value.content.number|tostring)) |"')

  echo -e "### SL PM Tasks"
  echo -e "$headers"
  echo "$result"
  echo -e "$headers\n$result" | pbcopy
}


####################################################################################
####################################################################################
####################################################################################
####################################################################################
####################################################################################

##################                   *******  ****     **** ********** **                  ** *******  ******
##################                  /**////**/**/**   **/**/////**/// /**                 /**/**////**/*////**
##################                  /**   /**/**//** ** /**    /**    /**                 /**/**   /**/*   /**
##################                  /******* /** //***  /**    /**    /**       *****     /**/******* /******
##################                  /**////  /**  //*   /**    /**    /**      /////      /**/**////  /*//// **
##################                  /**      /**   /    /**    /**    /**             **  /**/**      /*    /**
##################                  /**      /**        /**    /**    /********      //***** /**      /*******
##################                  //       //         //     //     ////////        /////  //       ///////

function pmtl-jpb() {
  local headers="|Order | Status | Title | Project | Link|\n|---|---|---|---|---|"

  local result=$(gh p item-list 36 --limit 300 --format=json | jq -r '(.items | to_entries | map(select((.value.status == "In progress" or .value.status == "Backlog" or .value.status == "Waiting") and (.value.assignees[]? | contains("jonathanpberger"))))) | .[] | "| \(.key+1) | \(.value.status) | \(.value.title) | \(.value["project 🪚"]) | \((.value.content.repository | split("/")[-1]) + "/" + (.value.content.number|tostring)) |"')

  echo -e "### SL PM Tasks for JPB"
  echo -e "$headers"
  echo "$result"
  echo -e "$headers\n$result" | pbcopy
}
# ######### this works
#
# function gordtl() {
#   local headers="|Title|Status|url|Assignees|\n|--|--|--|--|"
#   local result=$(gh p item-list 47 --limit 22 --format=json | jq -r '.items[] | "| \(.title) | \(.status) |\(.content.url) | \(.assignees // [] | if type == "array" then map(if type == "object" then .login else . end) else [] end | join(", ")) |"')

#   echo -e "### Gordian Tasks"
#   echo -e "$headers"
#   echo "$result"
#   echo -e "$headers\n$result" | pbcopy
# }
# #########


########################     ██████╗  ██████╗ ██████╗ ██████╗ ████████╗██╗        Gordian Task List
########################    ██╔════╝ ██╔═══██╗██╔══██╗██╔══██╗╚══██╔══╝██║
########################    ██║  ███╗██║   ██║██████╔╝██║  ██║   ██║   ██║
########################    ██║   ██║██║   ██║██╔══██╗██║  ██║   ██║   ██║
########################    ╚██████╔╝╚██████╔╝██║  ██║██████╔╝   ██║   ███████╗
########################     ╚═════╝  ╚═════╝ ╚═╝  ╚═╝╚═════╝    ╚═╝   ╚══════╝



function gordtl() {
  echo "Version 0.42"
  local headers="|Order|Status|Title|URL|Assignees|\n|--|--|--|--|--|"
  local result=$(gh p item-list 47 --format=json | jq -r '.items | to_entries[] | "| \(.key + 1) | \(.value.status) | \(.value.title) | \(.value.content.url) | \(.value.assignees // [] | if type == "array" then map(if type == "object" then .login else . end) else [] end | join(", ")) |"')

  local count=$(echo "$result" | wc -l | tr -d ' ')

  echo -e "### Gordian Tasks"
  echo -e "$headers\n$result"
  echo -e "$headers\n$result" | pbcopy
  echo -e "\n\n********* Gordian Tasks have been copied to the clipboard. There are $count tasks. :-) ###\n"
}


#################           ██████╗ ██╗  ██╗████████╗██╗          Github Task List
#################          ██╔════╝ ██║  ██║╚══██╔══╝██║          Map this to whichever project is top priority.
#################          ██║  ███╗███████║   ██║   ██║
#################          ██║   ██║██╔══██║   ██║   ██║
#################          ╚██████╔╝██║  ██║   ██║   ███████╗
#################           ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚══════╝



function ghtl() {
  local headers="|Order | Status | Title | url|"
  local separators="|$(echo "$headers" | sed 's/[^|]//g' | sed 's/|/---|/g' | sed 's/|$//')"

  local result=$(gh p item-list 46 --limit 300 --format=json | jq -r '(.items | to_entries | map(select((.value.status == "In progress" or .value.status == "Backlog" or .value.status == "Waiting") and (.value.assignees[]? | contains("jonathanpberger"))))) | .[] | "| \(.key+1) | \(.value.status) | \(.value.title) | \((.value.content.repository | split("/")[-1]) + "/" + (.value.content.number|tostring)) |"')

  echo -e "### README.lint Tasks"
  echo -e "$headers"
  echo -e "$separators"
  echo "$result"
  echo -e "$headers\n$result" | pbcopy
}


####################       ██████╗ ██╗  ██╗██╗
####################      ██╔════╝ ██║  ██║██║
####################      ██║  ███╗███████║██║
####################      ██║   ██║██╔══██║██║
####################      ╚██████╔╝██║  ██║██║
####################       ╚═════╝ ╚═╝  ╚═╝╚═╝



function ghi() {
  local user=$(gh api /user | jq -r '.login')
  local header="| Repository | Number | State | Title |url|"
  local separator="|------------|--------|-------|-----|--|"
  local results=$(gh search issues --assignee=@me --state=open --limit 333 --include-prs --json="repository,number,state,title,url" | jq -r '.[] | "| \(.repository.name) | \(.number) | \(.state) | \(.title) | \(.url) |"')
  local count=$(echo "$results" | wc -l | tr -d ' ')
  local title="### $count Open GitHub Issues for @$user"

  echo "$title"
  echo "$header"
  echo "$separator"
  echo "$results"

  echo -e "$title\n$header\n$separator\n$results" | pbcopy
  echo -e "\n$title have been copied to the clipboard. There are $count issues. :-) ###"
}

function ghepic() {
  local user=$(gh api /user | jq -r '.login')
  local header="| EPIC |url|"
  local separator="|---|---|"
  local results=$(gh search issues --assignee=@me --state=open --limit 333 --include-prs --json="repository,number,state,title,url" | jq -r '.[] | "| \(.title) | \(.url) |"' | grep EPIC)
  local count=$(echo "$results" | wc -l | tr -d ' ')
  local title="### $count Open GitHub Issues for @$user"

  echo "$title"
  echo "$header"
  echo "$separator"
  echo "$results"

  echo -e "$title\n$header\n$separator\n$results" | pbcopy
  echo -e "\n$title have been copied to the clipboard. There are $count Epics. :-) ###"
}

function ghi2() {
  gh search issues --assignee=@me --state=open
}



############    ██████╗ ██████╗  █████╗ ██╗   ██╗ ANSI Shadow
############   ██╔════╝ ██╔══██╗██╔══██╗╚██╗ ██╔╝
############   ██║  ███╗██║  ██║███████║ ╚████╔╝
############   ██║   ██║██║  ██║██╔══██║  ╚██╔╝
############   ╚██████╔╝██████╔╝██║  ██║   ██║
############    ╚═════╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝
############    TODO: extend lines in 30m increments, by duration
############    ╚═════╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝


########################################
# ChatGPT Pseudo-code
## Header Creation: Generates a header for the output, including the current date and week number (for Mondays).
#
## Table Headers: Prepares headers for the table that will display the calendar events.
#
## Fetching Calendar Data: Uses gcalcli to fetch today's agenda from Google Calendar. The --details length flag is used to include the duration of each event.
#
## Emoji Mapping: Defines a map of emojis for different times of the day. This is used to add a visual cue (emoji) to each event based on its start time.
#
## Processing Calendar Output: The main part of the script processes the output from gcalcli. It involves several steps:
#
## Removing ANSI color codes for plain text processing.
## Parsing each line to extract the time, duration, and description of events.
## Adding an emoji to the event if it doesn't start with one.
## Converting the event duration from hours and minutes to a total in minutes.
## Storing the processed information for each event.
## Expanding Events Longer than 30 Minutes: For events longer than 30 minutes, the script splits them into multiple 30-minute blocks. It uses a custom function add_pomodoro to increment the time by 30 minutes for each block.
#
## Handling Pomodoros and Event Conflicts: The script aims to remove pomodoro (🍅) events that conflict with longer events. This step seems to need refinement based on the issues you're experiencing.
#
## Final Output Assembly: Constructs the final output table with the processed event data.
## ------------

## # Gday is a script to integrate my gCal with my daily notes. To help organize my time, the day should be broken into pomodoros wheverer I don't have existing appointments

## As JPB
## I want to connect my gCal to my daily notes
## Because I prefer to work in plaintext and markdown

## When I run gday
## Then all my gcal appointments should come in
## And any appointments longer than a pomodoro should be broken into 30m chunks
## And any appointments without an emoji should be assigned one based on their start time
## And their emoji should be duplicated for each chunk, ie the first Most Important Thing should start with 👑 and the second with 👑👑, etc
## And any unscheduled time should be broken into pomodoros
## And any pomodoros that conflict with other events should be removed

## ## Pseudo-code
## - Create Table Headers and define clock Emoji Map
## - Fetch Calendar Data from Google Calendar
## - Remove ANSI color codes from Cal data
## - extract time, duration, and description of events from each line of Cal data
## - Add clock emoji to Cal data lines lacking emoji
## - Expand Events Longer than 30 Minutes into multiple lines, 30m each
## - Remove Pomodoro lines that conflict with other events
## - Render the final markdown table
#

########################################
########################################
########################################
########################################


# path/filename: ~/scripts/todo_project_count.sh
# This script generates a markdown table with a list of unique projects and their counts from the todo.md file.
# Function to extract projects and count occurrences
generate_project_table() {
  local todo_file=$1
  echo "| Project | Count |"
  echo "|---------|-------|"
  grep -o "++[a-zA-Z0-9_]*" "$todo_file" | sort | uniq -c | while read -r count project; do
    # Clean project name and format as markdown table row
    project=${project//++/}
    echo "| $project | $count |"
  done
}

# Call the function with the path to the todo.md file
# generate_project_table "/path/to/todo.md"

########################################
########################################
########################################
########################################


extract_h2s() {
  awk '
    BEGIN {
      print "## Later Today..."
      print "```"
    }
    function normalize(str) {
      gsub(/[^a-zA-Z0-9 ]/, "", str);
      return str;
    }
    /^\| [0-9]/ {
      sub(/^\|[^|]+\| /, "## ");
      gsub(/ \|$/, "");
      if ($0 !~ /🍅/ && $0 !~ /🍜 Lunch/) {
        norm = normalize($0);
        if (!seen[norm]++) {
          print $0
        }
      }
    }
    END {
      print "```"
      print ""
      print "## 🚢 What did you ship today?"
      print ""
      print ""
    }
  '
}

########################################
########################################
########################################
########################################





function ship() {
    local now_file="$HOME/now.md"

  echo "| Date       | Shipped Items |"
  echo "|------------|---------------|"

  awk '
    function trim(s) {
      sub(/^[[:space:]]+/, "", s)
      sub(/[[:space:]]+$/, "", s)
      return s
    }
    /^# [0-9]{2}\/[0-9]{2}/ {
      if (date) {
        printf "| %-10s | %s |\n", date, (shipped ? shipped : "No items shipped")
      }
      day_of_week = substr($4, 1, 3)  # Take first 3 chars of day
      date = $2 " - " day_of_week
      shipped = ""
      in_ship_section = 0
    }
    /^## 🚢 What did you ship today\?/ {
      in_ship_section = 1
      next
    }
    /^#|^---/ {
      in_ship_section = 0
    }
    in_ship_section && NF {
      shipped = shipped " " $0
    }
    END {
      if (date) {
        printf "| %-10s | %s |\n", date, (shipped ? trim(shipped) : "No items shipped")
      }
    }
  ' "$now_file"
}


########################################
########################################
########################################
########################################


function monthly_review() {
  # Define the filenames
  old_file="jpb_notes-$(date -v-1m +%Y-%m).md"
  new_file="jpb_notes-$(date +%Y-%m).md"

  echo "\n######### DRY RUN: Monthly Review #########"
  echo "######### prev: $old_file"
  echo "######### now: $new_file\n"

  # Simulate copy and update filename
  echo "[DRY RUN] Would copy $old_file to $new_file"

  # Simulate making old file read-only
  echo "[DRY RUN] Would make $old_file read-only (chmod 444)"

  # Simulate removing and creating symbolic links
  echo "[DRY RUN] Would remove now.md and create symlink to $new_file"
  echo "[DRY RUN] Would remove prev.md and create symlink to $old_file"

  # Simulate updating the frontmatter in the new file
  echo "[DRY RUN] Would update frontmatter in $new_file:"
  cat <<EOF
---
name: JPB Monthly Notes for $(date +'%m')/$(date +'%Y')
filepath: "$new_file"
---
EOF

  # Simulate checking the links
  echo "\n[DRY RUN] Would check links:"
  echo "now.md -> $new_file"
  echo "prev.md -> $old_file"

  echo "\n######### End of DRY RUN #########"
}



function gday() {
  case "$1" in
    auth)
      echo "Removing gcalcli OAuth token and running agenda..."
      rm ~/.gcalcli_oauth && gcalcli agenda
      return
      ;;
    prev|yesterday|yday)
      date_arg="yesterday"
      display_date=$(date -v -1d "+%m/%d - %A")
      week_number=$(date -v -1d "+%V")
      ;;
    *)
      date_arg="today"
      display_date=$(date "+%m/%d - %A")
      week_number=$(date "+%V")
      ;;
  esac

  echo "    🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞"
  echo "    🌞🌞🌞    gday Version 2.2.5    🌞🌞🌞"
  echo "    🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞🌞 \n\n"

  # TODO: Cull pomodoros for times which already have appointments
  # TODO: When splitting long events into multiple pomodoros, duplicate the emoji for each pomodoro
  # TODO: Add tests. Maybe <https://github.com/shellspec/shellspec>?
  # TODO: Parse pseudo-code into Features List / Release Notes
  # TODO: Factor this out into more sane methods. And pull out of `alias` file.

# gday auth should run 'rm ~/.gcalcli_oauth\ngcalcli agenda'


  ##### Setup
  declare -A emoji_map=(
    [800]="🕗" [830]="🕣" [900]="🕘" [930]="🕤"
    [1000]="🕙" [1030]="🕥" [1100]="🕚" [1130]="🕦"
    [1200]="🕛" [1230]="🕧" [100]="🕐" [130]="🕜"
    [200]="🕑" [230]="🕝" [300]="🕒" [330]="🕞"
    [400]="🕓" [430]="🕟" [500]="🕔" [530]="🕠"
    [600]="🕕" [630]="🕡" [700]="🕖" [730]="🕢"
  )

  local title="## 🪢 Todo Today"
  local table_header="| Time    | Item |"
  local table_separator="|---------|------|"
  local kicker="\n******* DO WHATEVER THE SCHEDULE TELLS ME. AND ONLY THAT.**********\n\n\n### Brain Dump (for 👑s)\n\n\n --- \n\n\n- 1st 🐸 I'll eat:\n- 2nd 🐸 I'll eat:\n- 3rd 🐸 I'll eat:\n\n"

  ###### Day of week should include 📅 and weeknum on Mondays
  local h1="# $display_date"

  if [[ $display_date == *"Monday"* ]]; then
    h1+=" - 📆 Week $week_number"
  fi
  # local calendar_names=("JPB-DW" "Pomo" "JPB Private" "Jonathan Berger (TripIt)")

  # Build the calendar arguments string
  local calendar_args=""
  for cal in "${GCAL_CALENDARS[@]}"; do
    calendar_args+="--cal \"$cal\" "
  done

  # Use the calendar_args in the gcalcli command
  local calendar_data=$(eval "gcalcli $calendar_args agenda \"1am $date_arg\" \"11pm $date_arg\" --nocolor --no-military --details length")
  local calendar_data_no_color=$(echo "$calendar_data" | sed 's/\x1b\[[0-9;]*m//g')

  ###### convert pipe characters to an em-dash (bc escaping pipes is hard)
  calendar_data_no_color=$(echo "$calendar_data_no_color" | sed 's/|/—/g')

  local body=""
  local lines=()
  local time_count=()
  local prev_time=""
  local prev_item=""

##### Process the calendar data
while IFS= read -r line; do
  line=$(echo "$line" | sed 's/^[ \t]*//') # trim whitespace

  # Function to add a pomodoro (30 minutes) to a given time
  add_pomodoro() {
    local time=$1
    local new_time=$(date -j -v+30M -f "%I:%M%p" "$time" +"%I:%M%p")
    echo $new_time | sed 's/^0//' | tr '[:upper:]' '[:lower:]'
  }

  if [[ $line =~ ^[0-9]{1,2}:[0-9]{2}[apm]{2} ]]; then # if line starts with time
    local time=$(echo "$line" | awk '{print $1}') # extract vars
    local item=$(echo "$line" | awk '{$1=""; print substr($0,2)}')

    # Split >30m events into multiple lines
    IFS= read -r next_line
    local duration_raw=$(echo "$next_line" | awk '/Length:/ {print $2}')
    local hours=$(echo "$duration_raw" | cut -d ':' -f 1)
    local minutes=$(echo "$duration_raw" | cut -d ':' -f 2)
    local total_minutes=$((hours * 60 + minutes))
    local blocks=$((total_minutes / 30))

    for ((i=0; i<blocks; i++)); do
      new_line="$time|$item"
      if [[ "$time" != "$prev_time" || "$item" != "🍅" ]]; then
        lines+=("$new_line")
      elif [[ "$item" != "🍅" && ${#lines[@]} -gt 0 ]]; then
        lines[-1]="$new_line"
      fi
      prev_time="$time"
      prev_item="$item"
      time=$(add_pomodoro "$time")
    done

  fi
done <<< "$calendar_data_no_color"

##### Add emoji to items lacking emoji and construct the final table
for line in "${lines[@]}"; do
  IFS='|' read -r time item <<< "$line"
  local time_number=$(echo "$time" | tr -d '[:alpha:]' | tr -d ':')

  if ! [[ $item =~ ^[^[:alnum:]] ]]; then # if item lacks emoji
    local emoji=${emoji_map[$time_number]} # then add emoji
    item="${emoji} $item"
  fi

  body+="| ${time} | ${item} |"$'\n'
done

echo -e "${h1}\n\n${title}\n${table_header}\n${table_separator}\n${body}\n\n${kicker}"

echo $body | extract_h2s

}

############################    ___|  ____| __ __|       _ \    _ \    _ \       |  ____|   ___| __ __|     _ _| __ __|  ____|   \  |   ___|  ###################
############################   |      __|      |        |   |  |   |  |   |      |  __|    |        |         |     |    __|    |\/ | \___ \  ################### Get project items, done w/ copilot.
############################   |   |  |        |        ___/   __ <   |   |  \   |  |      |        |         |     |    |      |   |       | ################### THIS WORKS
############################  \____| _____|   _|       _|     _| \_\ \___/  \___/  _____| \____|   _|       ___|   _|   _____| _|  _| _____/  ###################

function get_project_items {
  # Version 1.1.0
  # Usage: `get_project_items "assignee_name" 36 49 48 30 39` or `get_project_items "" 36 49 48 30 39`
  assignee_filter=${1:-""}
  shift
  project_numbers=("$@")

  current_date=$(date +"%m-%d-%Y")
  limit=3
  echo "~~~~~~~~~~~~~~~~~~ limit: $limit ~~~~~~~~~~~~~~~~~~\n\n"

  echo "~~~ Assignee filter: $assignee_filter"
  echo -e "\n\n### 👑 Epics (as of $current_date)\n| Project | Title | Status | Story Type | Assignees | URL |\n|---------|-------|--------|------------|-----------|-----|"
  for project in "${project_numbers[@]}"; do
    gh p item-list $project --format json --limit $limit -q ".items[] | select((.status? // \"\") | test(\"In progress|Backlog|Waiting/Review\")) | select(.assignees==\"$assignee_filter\" or \"$assignee_filter\"==\"\") | select(if .[\"story Type\"]? then (.[\"story Type\"] // \"\") | test(\"Epic\") else false end) | \"| $project | \(.title) | \(.status) | \(.[\"story Type\"]) | \(.assignees) | \(.content.url | sub(\"https://github.com/strangelove-ventures/\"; \"\")) |\""
    echo "~~ Project: $project"
    break
  done

  echo -e "\n\n### ⭐️🐞⚙️🏁 Stories (as of $current_date, excluding Icebox and Done)\n| Project | Title | Status | Story Type | Assignees | URL |\n|---------|-------|--------|------------|-----------|-----|"
  for project in "${project_numbers[@]}"; do
    gh p item-list $project --format json --limit $limit -q ".items[] | select((.status? // \"\") | test(\"In progress|Backlog|Waiting/Review\")) | select(.assignees==\"$assignee_filter\" or \"$assignee_filter\"==\"\") | select(if .[\"story Type\"]? then ((.[\"story Type\"] // \"\") | test(\"Epic\")) | not else true end) | \"| $project | \(.title) | \(.status) | \(.[\"story Type\"]) | \(.assignees) | \(.content.url | sub(\"https://github.com/strangelove-ventures/\"; \"\")) |\""
    sleep 1
  done
}

# Optimized function to reduce API calls
function get_project_items2 {
  # Version 1.2.2
  # Usage: `get_project_items "assignee_name" 36 49 48 30 39` or `get_project_items "" 36 49 48 30 39`
  assignee_filter=${1:-""}
  echo "Assignee filter: $assignee_filter"
  shift
  project_numbers=("$@")
  echo "Project numbers: ${project_numbers[@]}"
  current_date=$(date +"%m-%d-%Y")
  limit=3
  echo "~~~~~~~~~~~~~~~~~~ limit: $limit ~~~~~~~~~~~~~~~~~~\n\n"
  total_api_calls=0
  echo "total_api_calls: $total_api_calls"

  echo -e "\n\n### 👑 Epics (as of $current_date)\n| Project | Title | Status | Story Type | Assignees | URL |\n|---------|-------|--------|------------|-----------|-----|"
  echo -e "\n\n### ⭐️🐞⚙️🏁 Stories (as of $current_date, excluding Icebox and Done)\n| Project | Title | Status | Story Type | Assignees | URL |\n|---------|-------|--------|------------|-----------|-----|"

  for project in "${project_numbers[@]}"; do
    echo "~~~ Processing project number $project ~~~"
    # Fetch all items for the project
    items=$(gh p item-list $project --format json --limit $limit -q ".items[]")
    total_api_calls=$((total_api_calls+1))
    echo "total_api_calls: $total_api_calls"

    # Loop through each item and filter based on conditions
    while read -r item; do
      # echo "/// in while loop for project $project"
      # echo "//// item: $item"
      item_status=$(jq -r '.status' <<< "$item")
      # echo "///// status: $item_status"
      story_type=$(jq -r '.["story Type"] // ""' <<< "$item")
      # echo "////// story_type: $story_type"
      assignees=$(jq -r '.assignees' <<< "$item")
      # echo "/////// assignees: $assignees"
      url=$(jq -r '.content.url' <<< "$item")
      # echo "//////// url: $url"

      if [[ "$item_status" =~ (in progress|backlog|waiting/review) ]] && [[ "$assignees" == "$assignee_filter" || "$assignee_filter" == "" ]]; then
        if [[ "${story_type,,}" == *"epic"* ]]; then
          echo "| $project | $(jq -r '.title' <<< "$item") | $item_status | $story_type | $assignees | ${url//"https://github.com/strangelove-ventures/"/} |"
        else
          echo "| $project | $(jq -r '.title' <<< "$item") | $item_status | $story_type | $assignees | ${url//"https://github.com/strangelove-ventures/"/} |"
        fi
      fi
    done <<< "$items"
  done

  echo "API calls used: $total_api_calls"
}




######################   █████╗ ██╗     ██╗  ████████╗██╗        # alltl function v0.1
######################  ██╔══██╗██║     ██║  ╚══██╔══╝██║        # Retrieves a combined list of all GitHub issues assigned to me and their project status.
######################  ███████║██║     ██║     ██║   ██║        # Depends on GitHub CLI (`gh`) and `jq` for processing JSON.
######################  ██╔══██║██���     ██║     ██║   ██║
######################  ██║  ██║███████╗███████╗██║   ███████╗
######################  ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝   ╚══════╝

function alltl() {
  # Get list of issues assigned to me
  local issues=$(gh issue list --assignee @me --json number,title,repository --jq '.[] | {number, title, repo: .repository.nameWithOwner}')

  # Get list of projects I'm a member of
  local projects=$(gh api graphql -f query='
    {
      viewer {
        projectsV2(first: 10) {
          nodes {
            name
            items(first: 100) {
              nodes {
                content {
                  ... on Issue {
                    number
                  }
                }
                fieldValues(first: 10) {
                  nodes {
                    projectField {
                      name
                    }
                    value
                  }
                }
              }
            }
          }
        }
      }
    }' --jq '.data.viewer.projectsV2.nodes[] | {project: .name, items: [.items.nodes[] | {number: .content.number, status: (.fieldValues.nodes[] | select(.projectField.name == "Status") | .value)]}}')

  # Synthesize table with combined data
  local header="| Title | Repo Name / Issue Number | Assigned Project | Status |"
  local separator="|-------|-------------------------|------------------|--------|"
  echo "$header"
  echo "$separator"

  for issue in $(echo "$issues" | jq -c '.'); do
    local issue_number=$(echo "$issue" | jq -r '.number')
    local issue_title=$(echo "$issue" | jq -r '.title')
    local issue_repo=$(echo "$issue" | jq -r '.repo')
    local project_name="none"
    local status="none"

    # Check projects for this issue
    for project in $(echo "$projects" | jq -c '.'); do
      local p_name=$(echo "$project" | jq -r '.project')
      local p_issue=$(echo "$project" | jq --arg number "$issue_number" '.items[] | select(.number == ($number | tonumber))')
      if [ "$p_issue" != "" ]; then
        if [ "$project_name" == "none" ]; then
          project_name=$p_name
          status=$(echo "$p_issue" | jq -r '.status')
        else
          project_name="many"
          status="many"
          break
        fi
      fi
    done

    echo "| $issue_title | $issue_repo / $issue_number | $project_name | $status |"
  done | column -t -s '|'

  echo "Table has been synthesized."
}

function collect_field_names() {
  local version="v0.4"

  # Emit the version information
  echo "••••••••• collect_field_names [$version] •••••••••"

  # Retrieve and map the project names to their numbers
  local project_info=$(gh project list --owner strangelove-ventures --format json ) | jq -r '[.[] | {number, name}]'

  # Define the list of project numbers
  local project_numbers=(46 49 39 36 34 30 24 18)

  # Iterate over the project numbers to retrieve and print field names
  for project_number in $project_numbers; do
    # Extract the project name using the project number
    local project_name=$(echo "$project_info" | jq -r --argjson number $project_number '.[] | select(.number == $number) | .name')

    # Print the project name
    echo "Project $project_number ($project_name) fields:"

    # Retrieve and print the field names for the project
    gh project field-list $project_number --owner strangelove-ventures --format json |
      jq -r '[.fields[].name] | join(", ")'
    echo # Print a newline for better readability
  done
}

##################################################   ██████╗ ██████╗ ██╗ Map all issues to projects.
##################################################   ██╔══██╗██╔══██╗██║
##################################################   ██████╔╝██████╔╝██║
##################################################   ██╔═══╝ ██╔═══╝ ██║
##################################################   ██║     ██║     ██║
##################################################   ╚═╝     ╚═╝     ╚═╝

function ppi() {
  echo "Version 0.6.1"

  echo "Fetching current user..."
  local user=$(gh api /user | jq -r '.login')

  echo "Fetching Gordian tasks..."
  local gordianTasks=$(gh p item-list 47 --format=json | jq -r '
    .items | map({
      status: .status,
      title: .title,
      url: .content.url,
      assignees: (.assignees // [] | join(", "))
    })'
  )

  echo "Fetching PM tasks from another project..."
  local pmTasks=$(gh p item-list 36 --limit 300 --format=json | jq -r '
    .items | map(select(.content.url != null)) | map({
      status: .status,
      title: .title,
      project: .["project 🪚"],
      url: .content.url,
      projectStatuses: [{project: .project, status: .status}]
    })'
  )

  echo "Fetching GitHub issues..."
  local gitHubIssues=$(gh search issues --assignee=@me --state=open --limit=333 --include-prs --json="repository,number,state,title,url" | jq -r '.[] | {repository: .repository.name, number: .number, state: .state, title: .title, url: .url}')

  echo "Combining tasks and issues..."
  local combinedResults=$(jq -n '
    input as $gordianTasks | input as $pmTasks | input as $gitHubIssues |
    ($gordianTasks + $pmTasks + $gitHubIssues) | group_by(.url) | map({
      title: .[0].title,
      status: .[0].status,
      state: (.[0].state // ""),
      assignees: .[0].assignees,
      repository: (.[0].repository // ""),
      number: (.[0].number // ""),
      url: .[0].url,
      projectStatuses: (reduce .[] as $item ([]; . + ($item.projectStatuses // [])))
    })' <(echo "$gordianTasks") <(echo "$pmTasks") <(echo "$gitHubIssues"))

  local combinedTable=$(echo "$combinedResults" | jq -r '.[] | select(.url != null) | "| \(.title) | \(.status) // (if .projectStatuses then (.projectStatuses | map(.status) | join(", ")) else "N/A" end) | \(.assignees) | \(.repository) | \(.number) | \(.state) | \(.url) |"')

  local count=$(echo "$combinedResults" | jq -r 'length')
  local title="### Combined Gordian and SL PM Tasks with GitHub Issues for @$user"

  local tableHeader="|URL|Title|Status|Assignees|Repository|Issue Number|Issue State|"
  local separator="|---|-----|------|---------|----------|------------|-----------|"

  echo -e "$title\n$tableHeader\n$separator\n$combinedTable"

  echo -e "$title\n$tableHeader\n$separator\n$combinedTable" | pbcopy
  echo -e "\n$title have been copied to the clipboard. There are $count combined tasks and issues. :-) ###"
}

#!/bin/zsh  # v0.3.0

# Function to fetch and display assigned issues for a user
gh_assigned_issues() {
    local GITHUB_USERNAME="jonathanpberger"
    local ASSIGNEE="$1"

    # Function to fetch issue details
    fetch_issue_details() {
        local url="$1"
        curl -s -H "Authorization: token $GITHUB_TOKEN" "$url" | jq -r '.[] | [.title, .html_url, (.project | if length == 0 then "none" elif length == 1 then .[0].name else "many" end), (.project | if length == 0 then "none" elif length == 1 then .[0].columns[0].name else [.[] | .columns[0].name] | unique | join(", ") end)] | @tsv' | column -t -s $'\t'
    }

    # Fetching assigned issues for the user
    local issues_url="https://api.github.com/issues?assignee=$ASSIGNEE"
    fetch_issue_details "$issues_url"
}

#!/bin/zsh  # v0.5.0

# Function to fetch and display assigned issues for a user
gh_assigned_issues() {
    echo "~~~~~~~~~~~~ gh_assigned_issues v0.5.1 ~~~~~~~~~~~~"
    local GITHUB_USERNAME="jonthanpberger"
    local ASSIGNEE="jonthanpberger"
    echo "Assignee: $ASSIGNEE"


    # GraphQL query to fetch assigned issues along with projects and their statuses
    local graphql_query=$(cat <<EOF
{
  user(login: "$ASSIGNEE") {
    issues(first: 100, states: OPEN, orderBy: {field: CREATED_AT, direction: DESC}) {
      nodes {
        title
        url
        projectCards(first: 1) {
          nodes {
            column {
              name
              project {
                name
              }
            }
          }
        }
      }
    }
  }
}
EOF
)

    # Function to execute GraphQL query
    execute_graphql_query() {
        local query="$1"
        curl -s -H "Authorization: token $GITHUB_TOKEN" -X POST -d "{\"query\": \"$query\"}" "https://api.github.com/graphql"
    }

    # Function to process GraphQL response and display issue details
    process_response() {
        local response="$1"
        echo "Response received:"
        echo "$response"
        echo "Processing response..."
        echo "$response" | jq -r '.data.user.issues.nodes[] | [.title, .url, (.projectCards.nodes[0] | if .column then .column.name else "none" end), (.projectCards.nodes[0] | if .column then .column.project.name else "none" end)] | @tsv' | column -t -s $'\t'
    }

    # Fetching assigned issues using GraphQL
    local response=$(execute_graphql_query "$graphql_query")
    echo "## Assigned Issues for $ASSIGNEE"
    process_response "$response"
}





gh_projects_and_item_counts() {
    echo "| Project Name | Project ID | Item Count |"
    echo "| ------------ | ---------- | ---------- |"
    gh p list --format json | jq -r '.projects[] | "| \(.title) | \(.number) | \(.items.totalCount) |"'
}











##  ███████╗██╗███╗   ██╗██╗███████╗██╗  ██╗███████╗██████╗     ██╗      ██████╗  █████╗ ██████╗ ██╗███╗   ██╗ ██████╗      █████╗ ██╗     ██╗ █████╗ ███████╗███████╗████████╗
##  ██╔════╝██║████╗  ██║██║██╔════╝██║  ██║██╔════╝██╔══██╗    ██║     ██╔═══██╗██╔══██╗██╔══██╗██║████╗  ██║██╔════╝     ██╔══██╗██║     ██║██╔══██╗██╔════╝██╔════╝██╔════╝
##  █████╗  ██║██╔██╗ ██║██║███████╗███████║█████╗  ██║  ██║    ██║     ██║   ██║███████║██║  ██║██║██╔██╗ ██║██║  ███╗    ███████║██║     ██║███████║███████╗█████╗  ███████╗
##  ██╔══╝  ██║██║╚██╗██║██║╚════██║██╔══██║██╔══╝  ██║  ██║    ██║     ██║   ██║██╔══██║██║  ██║██║██║╚██╗██║██║   ██║    ██╔══██║██║     ██║██╔══██║╚════██║██╔══╝  ╚════██║
##  ██║     ██║██║ ╚████║██║███████║██║  ██║███████╗██████╔╝    ███████╗╚██████╔╝██║  ██║██████╔╝██║██║ ╚████║╚██████╔╝    ██║  ██║███████╗██║██║  ██║███████║███████╗███████║
##  ╚═╝     ╚═╝╚═╝  ╚═══╝╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚═════╝     ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝ ╚═════╝     ╚═╝  ╚═╝╚══════╝╚═╝╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝


echo "•••••••••••••••• Finished Loading aliases!\n\n"



